// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "go-starter/internal/application/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUserList provides a mock function with given fields: _a0
func (_m *UserService) GetUserList(_a0 context.Context) ([]dto.User, error) {
	ret := _m.Called(_a0)

	var r0 []dto.User
	if rf, ok := ret.Get(0).(func(context.Context) []dto.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type UserService_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *UserService_Expecter) GetUserList(_a0 interface{}) *UserService_GetUserList_Call {
	return &UserService_GetUserList_Call{Call: _e.mock.On("GetUserList", _a0)}
}

func (_c *UserService_GetUserList_Call) Run(run func(_a0 context.Context)) *UserService_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_GetUserList_Call) Return(_a0 []dto.User, _a1 error) *UserService_GetUserList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
